#!/usr/bin/env ruby

$LOAD_PATH[0, 0] = File.join(File.dirname(__FILE__), '..', 'lib')

require 'linguist'
require 'rugged'
require 'json'
require 'optparse'

$stats_size = Hash.new(0)
$stats_repo_size = 0
total_cnt = 0

def repo_stats(repo)
  $stats_repo_size += repo.size
  repo.languages.sort_by { |_, size| size }.reverse.each do |language, size|
    $stats_size[language] += size
  end
end

def file_breakdown(repo, path="")
  puts
  file_breakdown = repo.breakdown_by_file
  file_breakdown.each do |lang, files|
    puts "#{lang}:"
    files.each do |file|
      puts File.join(path, file)
    end
    puts
  end
end

options = {
  watermark: 1.0,
  path: Dir.pwd,
  breakdown: false,
  json: false,
  submodules: false
}
OptionParser.new do |opt|
  opt.on('-j', '--json') { |v| options[:json] = v }
  opt.on('-b', '--breakdown') { |v| options[:breakdown] = v }
  opt.on('-p', '--path PATH') { |v| options[:path] = v }
  opt.on('-w', '--watermark WATERMARK', Float) { |v| options[:watermark] = v }
  opt.on('-s', '--submodules') { |v| options[:submodules] = v }
end.parse!

path = options[:path]
breakdown = options[:breakdown]
json_breakdown = options[:breakdown]
watermark = options[:watermark]
submodules = options[:submodules]

if File.directory?(path)
  rugged = Rugged::Repository.new(path)

  submodules && rugged.submodules.each do |sb|
    sb_rugged = Rugged::Repository.new(File.join(path, sb.path ))
    sb_repo = Linguist::Repository.new(sb_rugged, sb_rugged.head.target_id)
    if !json_breakdown
      repo_stats(sb_repo)
    end
  end
  repo = Linguist::Repository.new(rugged, rugged.head.target_id)
  if !json_breakdown
    repo_stats(repo)
  end

  others_percentage = 0.0
  $stats_size.sort_by { |_, size| size }.reverse.each do |language, size|
    percentage = ((size / $stats_repo_size.to_f) * 100)
    total_cnt += percentage
    if percentage < watermark
      others_percentage += percentage
      next
    end
    percentage = sprintf '%.2f' % percentage
    puts "%-7s %s" % ["#{percentage}%", "#{language}"]
  end
  if !json_breakdown
    others_lang = sprintf 'Others < %.2f' % watermark
    percentage = sprintf '%.2f' % others_percentage
    puts "%-7s %s" % ["#{percentage}%", "#{others_lang}%"]
    puts "%-7s Total" % total_cnt
  end

  if breakdown
    rugged.submodules.each do |sb|
      sb_rugged = Rugged::Repository.new(File.join(path, sb.path))
      sb_repo = Linguist::Repository.new(sb_rugged, sb_rugged.head.target_id)
      file_breakdown(sb_repo, sb.path)
    end
    file_breakdown(repo)
  elsif json_breakdown
    puts JSON.dump(repo.breakdown_by_file)
  end
elsif File.file?(path)
  blob = Linguist::FileBlob.new(path, Dir.pwd)
  type = if blob.text?
    'Text'
  elsif blob.image?
    'Image'
  else
    'Binary'
  end

  puts "#{blob.name}: #{blob.loc} lines (#{blob.sloc} sloc)"
  puts "  type:      #{type}"
  puts "  mime type: #{blob.mime_type}"
  puts "  language:  #{blob.language}"

  if blob.large?
    puts "  blob is too large to be shown"
  end

  if blob.generated?
    puts "  appears to be generated source code"
  end

  if blob.vendored?
    puts "  appears to be a vendored file"
  end
end

